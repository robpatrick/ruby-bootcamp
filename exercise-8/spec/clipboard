          expect(output_stream.string).to eq(described_class::SUCCESS_MSG)
           	    			expect(output_stream.string).to eq(described_class::FAILURE_MSG)
           	    			    			expect(output_stream.string).to eq(described_class::DRAW_MSG)

           	    			    			    describe '#validate_choice' do

	    let(:output_stream) { StringIO.new }
	    let(:input_stream) { StringIO.new }
	    subject(:game) { described_class.new(output_stream, input_stream) }

	  	context 'invalid choice' do
	  		it 'outputs a invalid choice message' do
	  			game.validate_choice( FFaker::Lorem.words.first )
	  			expect(output_stream.string).to eq(described_class::INVAID_WEAPON_MSG)
	  		end
	    end

    #  context 'valid choices' do
#
 #     end